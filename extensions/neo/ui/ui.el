(defun neo/screen-geometry ()
  "Return the geometry of the primary monitor as a plist: (:x X :y Y :width W :height H).
Should work on X11 and Wayland."
  (let* ((monitors (display-monitor-attributes-list))
         (primary (car monitors))  ;; Fallback: first monitor
         (geom (assq 'geometry primary)))
    (when geom
      (let ((g (cdr geom)))
        (list :x (nth 0 g)
              :y (nth 1 g)
              :width (nth 2 g)
              :height (nth 3 g))))))

(defun neo/display-dpi (&optional display)
  "Return the approximate DPI of DISPLAY (default: selected frame's display).
Returns a cons cell (dpi-x . dpi-y), or nil if unavailable."
  (let* ((display (or display (frame-parameter nil 'display)))
         (mm-width (display-mm-width display))
         (mm-height (display-mm-height display))
         (px-width (display-pixel-width display))
         (px-height (display-pixel-height display)))
    (when (and mm-width mm-height (> mm-width 0) (> mm-height 0))
      (cons
       (/ (* px-width 25.4) mm-width)   ;; dpi-x = pixels / (mm / 25.4)
       (/ (* px-height 25.4) mm-height)))))

;; (defun neo/fit-font-to-lines (lines &optional font-name)
;;   "Adjust font size so LINES fit vertically in the current screen.
;; Optional FONT-NAME overrides the default font family."
;;   (interactive "nNumber of lines to fit: ")
;;   (let* ((geom (neo/screen-geometry))
;;          (screen-height (plist-get geom :height))
;;          (window (selected-window))
;;          (line-height
;;           (condition-case nil
;;               (let* ((start-pos (posn-at-point (point-min) window))
;;                      (end-pos (posn-at-point (save-excursion (goto-char (point-min)) (forward-line 1) (point)) window))
;;                      (start-px (and start-pos (cdr (posn-x-y start-pos))))
;;                      (end-px   (and end-pos (cdr (posn-x-y end-pos)))))
;;                 (if (and start-px end-px)
;;                     (- (cdr end-px) (cdr start-px))
;;                   (frame-char-height)))
;;             (error (frame-char-height))))
;;          (font-height (face-attribute 'default :height))
;;          (target-height (floor (* font-height (/ (float screen-height) (* lines line-height)))))
;;          (font (or font-name (face-attribute 'default :family))))
;;     (set-face-attribute 'default nil :height (max 1 target-height) :family font)
;;     (message "Set font height to %d to fit %d lines (%d px line height)" target-height lines line-height)))

(defun neo/font-height-to-fit-lines (lines &optional font-name)
  "Return the font height needed to fit LINES vertically in the current screen.
Optional FONT-NAME can be used to compute based on a specific font family."
  (interactive "nNumber of lines to fit: ")
  (let* ((geom (neo/screen-geometry))
         (screen-height (plist-get geom :height))
         (window (selected-window))
         (line-height
          (condition-case nil
              (let* ((start-pos (posn-at-point (point-min) window))
                     (end-pos (posn-at-point (save-excursion (goto-char (point-min)) (forward-line 1) (point)) window))
                     (start-px (and start-pos (cdr (posn-x-y start-pos))))
                     (end-px   (and end-pos (cdr (posn-x-y end-pos)))))
                (if (and start-px end-px)
                    (- (cdr end-px) (cdr start-px))
                  (frame-char-height)))
            (error (frame-char-height))))
         (current-font-height (face-attribute 'default :height))
         (font-height (floor (* current-font-height (/ (float screen-height) (* lines line-height))))))
    (when (called-interactively-p 'interactive)
      (message "Calculated font height: %d (for %d lines, %d px line height)" font-height lines line-height))
    font-height))

(set-face-attribute 'default nil
                        :family "Noto Mono"
                        :height (neo/font-height-to-fit-lines 80 "Noto Mono"))

(defun neo/save-initial-frame-properties ()
  "Save the current frame size, font, and default face background/foreground
to a file that can be loaded from early-init.el."
  (interactive)
  (let* ((frame (selected-frame))
         (font (frame-parameter frame 'font))
         (width (frame-width))
         (height (frame-height))
         (bg (face-background 'default nil t))
         (fg (face-foreground 'default nil t))
         (font-attr (face-attribute 'default :font nil 'default))
         (family (face-attribute 'default :family nil 'default))
         (font-height (face-attribute 'default :height nil 'default))
         (file (expand-file-name "~/.cache/neo/initial-frame-properties.el")))
    (make-directory (file-name-directory file) t)
    (with-temp-file file
      (insert ";; Auto-generated by neo/save-initial-frame-properties\n")
      (insert "(setq default-frame-alist\n")
      (insert (format "      '((width . %d)\n" width))
      (insert (format "        (height . %d)\n" height))
      (insert (format "        (font . %S)\n" font))
      (insert "        (internal-border-width . 0)\n")
      (insert "        (undecorated . nil)))\n\n")
      (insert (format "(set-face-attribute 'default nil :background %S :foreground %S :family %S :height %d)\n"
                      bg fg family font-height)))))

;;; This tries to do more but doesn't work
;; (defun neo/save-initial-frame-properties ()
;;   "Save the current frame and default face appearance to ~/.cache/neo/initial-frame-properties.el
;; for use in early-init.el to prevent startup flicker and resizing."
;;   (interactive)
;;   (let* ((frame (selected-frame))
;;          (face-props `(:family ,(face-attribute 'default :family frame 'default)
;;                         :height ,(face-attribute 'default :height frame 'default)
;;                         :weight ,(face-attribute 'default :weight frame 'default)
;;                         :slant ,(face-attribute 'default :slant frame 'default)
;;                         :background ,(face-background 'default frame 'default)
;;                         :foreground ,(face-foreground 'default frame 'default)))
;;          (frame-props `((width . ,(frame-width frame))
;;                         (height . ,(frame-height frame))
;;                         (font . ,(frame-parameter frame 'font))
;;                         (internal-border-width . ,(or (frame-parameter frame 'internal-border-width) 0))
;;                         (undecorated . ,(frame-parameter frame 'undecorated))
;;                         (left . ,(frame-parameter frame 'left))
;;                         (top . ,(frame-parameter frame 'top))
;;                         (fullscreen . ,(frame-parameter frame 'fullscreen))
;;                         (alpha-background . ,(frame-parameter frame 'alpha-background))
;;                         (vertical-scroll-bars . ,(frame-parameter frame 'vertical-scroll-bars))
;;                         (menu-bar-lines . ,(frame-parameter frame 'menu-bar-lines))
;;                         (tool-bar-lines . ,(frame-parameter frame 'tool-bar-lines))
;;                         (line-spacing . ,(frame-parameter frame 'line-spacing))
;;                         (background-color . ,(frame-parameter frame 'background-color))
;;                         (foreground-color . ,(frame-parameter frame 'foreground-color))))
;;          (output-file (expand-file-name "~/.cache/neo/initial-frame-properties.el")))
;;     (make-directory (file-name-directory output-file) t)
;;     (with-temp-file output-file(define-widget 'neo/font-presets-alist 'alist
  ;; "An alist of named font profiles."
  ;; :key-type 'symbol
  ;; :value-type 'neo/font-profile)


;;       (insert ";; Auto-generated initial frame properties for early-init\n")
;;       (insert "(setq default-frame-alist\n")
;;       (insert (pp-to-string frame-props))
;;       (insert ")\n\n")
;;       (insert "(apply 'set-face-attribute 'default nil\n")
;;       (insert (pp-to-string face-props))
;;       (insert ")\n"))
;;     (message "Saved frame and face settings to %s" output-file)))

;;; TODO maybe we should have one of these settings for laptop vs
;;; desktop and night/day. Maybe fontaine can be sued for this.

;;; TOTHINK maybe we should simply do this instead of having our own
;;; load theme
;;; (advice-add 'load-theme :after (lambda (&rest _) (neo/save-initial-frame-properties)))

(setq neo/fontaine-presets
   '((small
      :default-height 0.8)
     (regular)
     (medium
      :default-height 1.2)
     (large
      :default-height 1.5)
     (presentation
      :default-height 2.0)
     (t
      :default-family "Noto Mono"
      :default-height (lines 80)
      :default-weight regular
      :default-slant normal
      :default-width normal

      :fixed-pitch-family "Noto Mono"
      :fixed-pitch-weight nil
      :fixed-pitch-slant nil
      :fixed-pitch-width nil
      :fixed-pitch-height 1.0

      :fixed-pitch-serif-family nil
      :fixed-pitch-serif-weight nil
      :fixed-pitch-serif-slant nil
      :fixed-pitch-serif-width nil
      :fixed-pitch-serif-height 1.0

      :variable-pitch-family "Noto Sans"
      :variable-pitch-weight nil
      :variable-pitch-slant nil
      :variable-pitch-width nil
      :variable-pitch-height 1.0

      :mode-line-active-family nil
      :mode-line-active-weight nil
      :mode-line-active-slant nil
      :mode-line-active-width nil
      :mode-line-active-height 1.0

      :mode-line-inactive-family nil
      :mode-line-inactive-weight nil
      :mode-line-inactive-slant nil
      :mode-line-inactive-width nil
      :mode-line-inactive-height 1.0

      :header-line-family nil
      :header-line-weight nil
      :header-line-slant nil
      :header-line-width nil
      :header-line-height 1.0

      :line-number-family nil
      :line-number-weight nil
      :line-number-slant nil
      :line-number-width nil
      :line-number-height 1.0

      :tab-bar-family nil
      :tab-bar-weight nil
      :tab-bar-slant nil
      :tab-bar-width nil
      :tab-bar-height 1.0

      :tab-line-family nil
      :tab-line-weight nil
      :tab-line-slant nil
      :tab-line-width nil
      :tab-line-height 1.0

      :bold-family nil
      :bold-slant nil
      :bold-weight bold
      :bold-width nil
      :bold-height 1.0

      :italic-family nil
      :italic-weight nil
      :italic-slant italic
      :italic-width nil
      :italic-height 1.0

      :line-spacing nil)))

(defun neo--fontaine-get-preset-properties (preset presets)
  "Return list of properties for PRESET in PRESETS."
  (append (alist-get preset presets)
          (when-let* ((inherit (fontaine--get-inherit-name preset)))
            (alist-get inherit presets))
          (or (alist-get t presets)
              fontaine-generic-face-families)))

(defun neo/normalize-fontaine-presets (presets)
  (let ((result (copy-tree presets)))
    (let* ((default-preset (neo--fontaine-get-preset-properties t presets))
	   (default-family (fontaine--get-preset-property default-preset :default-family))
	   (default-height (plist-get default-preset :default-height)))
      (if (listp default-height)
	;;; compute the actual length as a function of the cadr of the
	;;; list. Error out if the list doesn't have 2 elements and if
	;;; the car is not 'lines
	;;; modify result
	  ))
    result))

(defun neo/normalize-fallback-preset (presets)
  (let ((result (copy-tree presets)))
    (let* ((default-entry (assoc t result))
           (props (cdr default-entry))
           (height (plist-get props :default-height)))
      (when (and (listp height))
        (unless (and (= (length height) 2)
                     (eq (car height) 'lines)
                     (numberp (cadr height)))
          (error "Invalid :default-height format in default preset: %S" height))
        (let ((computed (neo/font-height-to-fit-lines (cadr height))))
          (setcdr default-entry (plist-put props :default-height computed)))))
    result))

(defun neo/normalize-derived-presets (presets)
  "Return a copy of PRESETS where any floating-point `:default-height`
is multiplied by the default height from the fallback preset (`t`)."
  (let ((result (copy-tree presets)))
    ;; Get fallback default height from preset `t`
    (let* ((fallback-entry (assoc t result))
           (fallback-height (plist-get (cdr fallback-entry) :default-height)))
      (unless (and (integerp fallback-height))
        (error "Fallback preset must have an integer :default-height, got: %S" fallback-height))
      ;; Iterate and replace floats
      (dolist (entry result)
        (let* ((props (cdr entry))
               (height (plist-get props :default-height)))
          (when (floatp height)
            (let ((computed (floor (* height fallback-height))))
              (setcdr entry (plist-put props :default-height computed)))))))
    result))

(defun neo/normalize-fontaine-presets (presets)
  "Return a copy of PRESETS with normalized `:default-height` in the default preset.
If the default preset (key `t`) has a `:default-height` of the form `(:lines N)`,
it is replaced with a computed height using `neo/font-height-to-fit-lines`."
  (let* ((result (neo/normalize-fallback-preset presets))
	 (result (neo/normalize-derived-presets result)))
    result))

;;; TODO compute base size from screen geometry/dpi
;;; TODO allow specification of height as a multiplier from this base size
(neo/use-package fontaine
  :config
  (fontaine-set-preset 'regular)
  :custom
  (fontaine-presets (neo/normalize-fontaine-presets neo/fontaine-presets)))

(neo/use-package svg-tag-mode
  :config
  (plist-put svg-lib-style-default :font-family "JetBrainsMono Nerd Font")
  (plist-put svg-lib-style-default :font-size 8)
  (plist-put svg-lib-style-default :font-weight 'bold)
  :custom
  (svg-tag-tags
   '(("TODO" . ((lambda (tag) (svg-tag-make tag :face 'org-tag
;					    :radius 3 :stroke 2 :padding 1 :scale 0.75 :ascent 'center :margin 0 :font-size 8 :font-weight 'bold))))))
					    :scale 0.75 :ascent 'center :font-size 8 :font-weight 'bold))))))
  :hook
  ((prog-mode text-mode) . (lambda () (svg-tag-mode 1))))

;;; maybe not needed see comment below
(defun neo--clean-kill-ring-display ()
  "Remove circular `display` properties from kill ring entries to avoid serialization errors."
  (setq kill-ring
        (mapcar (lambda (s)
                  (if (and (stringp s) (get-text-property 0 'display s))
                      (let ((copy (copy-sequence s)))
                        (set-text-properties 0 (length copy) nil copy)
                        copy)
                    s))
                kill-ring)))

;;; maybe not needed see comment below
(defun neo/sanitize-undo-list-display-properties ()
  "Strip problematic `:display` properties from `buffer-undo-list` to avoid circular print errors.
This does not affect buffer contents, only removes text properties from undo history."
  (when (and (listp buffer-undo-list) (not buffer-read-only))
    (setq buffer-undo-list
          (mapcar
           (lambda (entry)
             (cond
              ;; Text insertion/removal entries may be strings with props
              ((and (stringp entry) (get-text-property 0 'display entry))
               (let ((copy (copy-sequence entry)))
                 (set-text-properties 0 (length copy) nil copy)
                 copy))
              ;; Cons cells representing (POS . STRING) or (POS . OVERLAY)
              ((and (consp entry)
                    (stringp (cdr entry))
                    (get-text-property 0 'display (cdr entry)))
               (let ((copy (copy-sequence (cdr entry))))
                 (set-text-properties 0 (length copy) nil copy)
                 (cons (car entry) copy)))
              (t entry)))
           buffer-undo-list))))

; TODO I swear I couldn't save because of 'Apparently circular
;structure being printed. But it doesn't seem to make a difference now.
;(add-hook 'before-save-hook #'neo/sanitize-undo-list-display-properties)
;(add-hook 'before-save-hook #'neo--clean-kill-ring-display)

(defvar neo/after-theme-load-hook nil
  "Hook run after a theme is loaded via `load-theme`.")

(defun neo/run-after-theme-load (&rest _)
  "Run `neo/after-theme-load-hook` after a theme is loaded."
  (run-hooks 'neo/after-theme-load-hook))

(advice-add 'load-theme :after #'neo/run-after-theme-load)

(add-hook 'neo/after-theme-load-hook #'neo/save-initial-frame-properties)

(neo/use-package ef-themes)

(defvar neo/current-theme 'ef-winter
  "Theme applied")
(with-eval-after-load 'desktop
  (push 'neo/current-theme desktop-globals-to-save))

(defun neo/load-theme-internal (theme)
  (let ((theme
         (if (stringp theme)
             (intern theme)
           theme)))
    (message "Loading theme %s (disabling others)" theme)
    (mapc #'disable-theme custom-enabled-themes)
    (setq neo/current-theme theme)
    (load-theme theme t)
    ))

(defun neo/load-theme ()
  (interactive)
  (neo/load-theme-internal
   (completing-read
    "Load custom theme: "
    (mapcar 'symbol-name (custom-available-themes)))))

(add-hook
 'desktop-after-read-hook
 (lambda () (neo/load-theme-internal neo/current-theme)))


